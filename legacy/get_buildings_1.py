import json
import folium
import pickle
from pyproj import Proj
from eviltransform import gcj2wgs
from shapely.geometry import Polygon, Point

projector = Proj("+proj=utm +zone=50 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")


def get_name_points():
    """
    从高德地图获取楼名, 用坐标拾取器手动得到边界
    """
    bds = [
        ["和平街十二区20号楼", True, (116.428276,39.968905), [(116.427821,39.96892), (116.42869,39.96894), (116.428701,39.968829), (116.427816,39.968813)]],
        ["和平街十二区19号楼", True, (116.426999,39.96902), [(116.426276,39.969039), (116.427666,39.969072), (116.427666,39.968969), (116.426276,39.968932)]],
        ["和平街十二区18号楼", False, (116.426656,39.968757), [(116.426285,39.968598), (116.426282,39.968735), (116.426346,39.968735), (116.426357,39.968813), (116.426904,39.968821), (116.426904,39.968722), (116.4264,39.968702), (116.426387,39.968595)]],
        ["和平街十二区17号楼", False, (116.426044,39.968518), [(116.425761,39.968545), (116.426303,39.968566), (116.426314,39.968439), (116.425767,39.968418)]],
        ["和平街十二区11号楼", False, (116.425422,39.96853), [(116.425202,39.968559), (116.425625,39.968563), (116.425625,39.968452), (116.425212,39.968444)]],
        ["和平街十二区9号楼", False, (116.425229,39.968206), [(116.425169,39.968431), (116.425255,39.968435), (116.425271,39.967868), (116.425186,39.967864)]],
        ["和平街十二区10号楼", False, (116.425594,39.968292), [(116.42537,39.968319), (116.425788,39.968323), (116.425793,39.968233), (116.42537,39.968221)]],
        ["和平街十二区8号楼", False, (116.425599,39.967971), [(116.425364,39.967999), (116.425793,39.968007), (116.425777,39.967925), (116.425364,39.967916)]],
        ["和平街十二区16号楼", False, (116.426028,39.968025), [(116.425906,39.96806), (116.426121,39.968069), (116.426121,39.967974), (116.426314,39.967978), (116.426308,39.968311), (116.426389,39.968307), (116.42641,39.967892), (116.426131,39.967879), (116.426121,39.967925), (116.425906,39.967921)]],
        ["和平街十二区7号楼", False, (116.425502,39.967733), [(116.425219,39.967736), (116.425756,39.96776), (116.425751,39.967694), (116.425327,39.967682), (116.425316,39.967534), (116.425225,39.96753)]],
        ["和平街十二区12号楼", False, (116.426162,39.967679), [(116.42596,39.967707), (116.426367,39.967715), (116.426378,39.967596), (116.426432,39.967592), (116.426437,39.967411), (116.426249,39.967415), (116.426244,39.967596), (116.425965,39.967596)]],
        ["和平街十二区5号楼", False, (116.425331,39.967091), [(116.425219,39.967279), (116.425316,39.967279), (116.425316,39.96737), (116.425413,39.967361), (116.425429,39.96686), (116.425236,39.966852)]],
        ["和平街十二区15号楼", False, (116.426157,39.967264), [(116.425847,39.967279), (116.426421,39.967296), (116.426426,39.967205), (116.425852,39.967197)]],
        ["和平街十二区6号楼", False, (116.42569,39.967005), [(116.425504,39.967016), (116.425869,39.967016), (116.425847,39.966942), (116.425498,39.966934)]],
        ["和平街十二区14号楼", False, (116.426093,39.967005), [(116.425922,39.967024), (116.426287,39.967032), (116.426282,39.966963), (116.425912,39.96695)]],
        ["和平街十二区4号楼", False, (116.425433,39.966504), [(116.425209,39.96665), (116.425305,39.966646), (116.425316,39.966514), (116.425761,39.966519), (116.425761,39.966453), (116.425225,39.966445)]],
        ["和平街十二区13号楼", False, (116.426146,39.966516), [(116.425815,39.966794), (116.425922,39.966794), (116.425928,39.966547), (116.42633,39.966551), (116.42633,39.966802), (116.426426,39.966806), (116.426437,39.966469), (116.42582,39.966457)]],
        ["和平街十二区3号楼", False, (116.425513,39.96622), [(116.425171,39.966235), (116.425777,39.966255), (116.425799,39.966058), (116.42567,39.966054), (116.425665,39.966157), (116.425295,39.966157), (116.425295,39.966042), (116.425177,39.966038)]],
        
        ["和平街十二区甲1号楼", False, (116.425288,39.965747), [(116.425214,39.965947), (116.425338,39.965943), (116.425343,39.965495), (116.425225,39.965495)]],
        ["和平街十二区甲3号楼", False, (116.42561,39.965874), [(116.425498,39.965918), (116.425729,39.965922), (116.42574,39.965844), (116.425692,39.965844), (116.425692,39.965774), (116.425541,39.965778), (116.425541,39.965844), (116.425493,39.965844)]],
        ["和平街十二区甲2号楼", False, (116.42561,39.96557), [(116.425498,39.965639), (116.425729,39.965639), (116.425729,39.965552), (116.425681,39.965552), (116.425681,39.965491), (116.425531,39.965482), (116.425531,39.965569), (116.425498,39.965569), (116.425504,39.965614)]],
        ["和平街十二区1号楼", False, (116.425561,39.96527), [(116.425252,39.965392), (116.425375,39.965388), (116.42538,39.965306), (116.425745,39.965306), (116.425751,39.9654), (116.425852,39.965396), (116.425863,39.965191), (116.425262,39.965195)]],
        # ["和平街十三区6号楼", [(116.425257,39.964997), (116.425863,39.964997), (116.425869,39.964681), (116.425756,39.964681), (116.425751,39.964915), (116.425364,39.964911), (116.42537,39.964668), (116.425273,39.964664)]],
        # ["和平街十三区17号楼", [(116.42603,39.964993), (116.426652,39.965001), (116.426652,39.964911), (116.42603,39.964899)]],
        # ["和平街十三区5号楼", [(116.425777,39.964549), (116.425879,39.964545), (116.425885,39.964216), (116.425788,39.964216)]],
        
        ["和平街十二区24号楼或化研院南小区5号楼或和平街十二区甲5号楼", False, (116.427396,39.965607), [(116.426791,39.965627), (116.427575,39.965648), (116.42758,39.965685), (116.427897,39.965689), (116.427902,39.965525), (116.427585,39.965521), (116.427591,39.965549), (116.426797,39.965533)]],
        ["和平街十二区22号楼或化研院南小区22号楼", True, (116.428571,39.965615), [(116.428049,39.965681), (116.429068,39.965693), (116.429071,39.965533), (116.428052,39.965521)]],
        ["和平街十二区23号楼", False, (116.429687,39.965648), [(116.429219,39.965706), (116.430139,39.965722), (116.430144,39.965558), (116.429216,39.965541)]],
        ["和平街十二区25号楼", True, (116.429655,39.966039), [(116.42916,39.966076), (116.430114,39.966117), (116.430123,39.96594), (116.429152,39.96592)]],

        # ["和平街十五区2号楼", [(116.430235,39.966409), (116.43031,39.966417), (116.430305,39.966347), (116.430589,39.966343), (116.430589,39.96638), (116.430691,39.966368), (116.430691,39.966277), (116.430654,39.966232), (116.430273,39.966228), (116.430267,39.966277), (116.430219,39.966273)]],
        # ["和平街十五区4号楼", [(116.430267,39.965776), (116.430343,39.965759), (116.430621,39.965722), (116.430729,39.965759), (116.430729,39.965661), (116.430729,39.965759), (116.430729,39.965661), (116.430686,39.965648), (116.430686,39.965603), (116.430305,39.965599), (116.430316,39.965652), (116.430257,39.965665)]],
        # ["和平街十五区1号楼", [(116.430836,39.966684), (116.430943,39.966651), (116.430949,39.966623), (116.431147,39.966614), (116.431142,39.966651), (116.431228,39.966676), (116.431228,39.966565), (116.431174,39.966573), (116.431185,39.966512), (116.430895,39.966503), (116.4309,39.966553), (116.430847,39.966553)]],
        # ["和平街十五区3号楼", [(116.430921,39.966009), (116.431018,39.966014), (116.431029,39.965964), (116.431221,39.965981), (116.431221,39.966014), (116.431291,39.966034), (116.431291,39.965915), (116.431264,39.965907), (116.431248,39.965857), (116.430963,39.965857), (116.430969,39.965903), (116.43091,39.965898)]],
    ]   

    buildings = []
    for i, (name, is_elevator, gate, points) in enumerate(bds):
        if points[0] != points[-1]:
            points += [points[0]]
        points = [gcj2wgs(*p[::-1])[::-1] for p in points]
        buildings.append({
            "id": i,
            "name": name,
            "points": points,
            "is_elevator": is_elevator,
            "gate_gps": gcj2wgs(*gate[::-1])[::-1],
            "gate_xy": projector(*gcj2wgs(*gate[::-1])[::-1]),
            "gate_id": str(i),
        })
    
    # 找出楼所在的路区
    regions = pickle.load(open("data/regions.pkl", "rb"))
    for r in regions:
        r["poly"] = Polygon(r["boundary"])
    for bd in buildings:
        p = Point(bd["gate_gps"])
        dis_ids = []
        for r in regions:
            dis = p.distance(r["poly"])
            if dis == 0:
                bd["region"] = r["id"]
                break
            dis_ids.append((dis, r["id"]))
        else:
            bd["region"] = min(dis_ids, key=lambda x:x[0])[1]

    return buildings


def plot_buildings(buildings):
    lon_cen, lat_cen = 116.4213, 39.9636
    G_folium = folium.Map(
        location=[lat_cen, lon_cen],
        control_scale=True
    )
    for bd in buildings:
        color = "orange" if bd["is_elevator"] else "royalblue"
        folium.PolyLine(
            locations=[p[::-1] for p in bd["points"]],
            opacity=0.8,
            weight=3,
            popup=(bd["id"], bd["name"]),
            color=color,
        ).add_to(G_folium)
        folium.CircleMarker(
            location=bd["gate_gps"][::-1],
            opacity=0.8,
            radius=3,
            fill=True,   
            popup=bd["gate_id"],
            color=color,
        ).add_to(G_folium)
    G_folium.save("figure/buildings.html")


def get_geojson(buildings):
    bd_geojson = []
    for bd in buildings:
        bd_geojson.append(
            {
                "type": "Feature",
                "properties": {"id": bd["id"], "name": bd["name"]},
                "geometry": {"type": "Polygon", "coordinates": [bd["points"]]},
            }
        )
    return bd_geojson
    

if __name__ == "__main__":
    buildings = get_name_points()
    json.dump(buildings, open("data/buildings.json", "w"))

    # bd_geojson = get_geojson(buildings)
    # json.dump(bd_geojson, open("data/buildings_geojson.json", "w"))

    plot_buildings(buildings)
